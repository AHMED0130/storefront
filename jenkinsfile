pipeline {
    agent any
    environment {
        IMAGE_NAME = 'ahmed0130/store:latest'
    }
    stages {
        stage('Test') {
            steps {
                script {
                    echo "test the application......"
                }
            }
        }
        stage('Build image') {
            steps {
                script {
                    echo "build the app image "

                    withCredentials([usernamePassword(credentialsId: 'dockerhub',
                        usernameVariable: 'USERNAME', passwordVariable: 'PASS')]) {
                        sh "docker build -t $IMAGE_NAME ."
                        sh 'echo $PASS | docker login -u $USERNAME --password-stdin'
                        sh "docker push $IMAGE_NAME"
                    }
                }
            }
        }
        stage('provision ec2-server') {
            environment {
            AWS_ACCESS_KEY_ID = credentials('aws_access_key')
            AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
                }
            steps {
                script {
                    dir('terraform') {                   
                        sh "terraform init"
                        sh "terraform apply -auto-approve"
                        EC2_PUBLIC_IP = sh(
                            script: "terraform output public_ip" ,
                            returnStdout : true             
                        ).trim()   
                    }
                }
            }
        }        
        stage('Deploy to aws') {
            steps {
                script {
                    echo "waiting for intialzation process..........."
                    sleep(time: 90 , unit: "SECONDS")

                    echo "deploying the application to aws instance......."
                    def shellscript="bash ./script.sh ${IMAGE_NAME}"

                    def AWS_INSTANCE="ec2-user@${EC2_PUBLIC_IP}"
                    sshagent(['store-server-key']) {
                        sh "scp -o StrictHostKeyChecking=no docker-compose.yml ${AWS_INSTANCE}:~/"
                        sh "scp -o StrictHostKeyChecking=no script.sh ${AWS_INSTANCE}:~/"
                        sh "ssh -o StrictHostKeyChecking=no ${AWS_INSTANCE} ${shellscript}"
                            }
                }
            }
        }


    }
}
